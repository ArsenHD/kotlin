digraph thisOfExtensionProperty_kt {
    graph [nodesep=3]
    node [shape=box penwidth=2]
    edge [penwidth=2]

    subgraph cluster_0 {
        color=red
        0 [label="Enter class A" style="filled" fillcolor=red];
        1 [label="Exit class A" style="filled" fillcolor=red];
    }
    subgraph cluster_1 {
        color=blue
        2 [label="Enter class <SELF_STATIC_OBJECT>" style="filled" fillcolor=red];
        3 [label="Exit class <SELF_STATIC_OBJECT>" style="filled" fillcolor=red];
    }
    0 -> {1} [color=green];
    1 -> {2} [color=green];
    1 -> {2} [style=dashed];
    2 -> {3} [color=green];

    subgraph cluster_2 {
        color=red
        4 [label="Enter class B" style="filled" fillcolor=red];
        5 [label="Exit class B" style="filled" fillcolor=red];
    }
    subgraph cluster_3 {
        color=blue
        6 [label="Enter class <SELF_STATIC_OBJECT>" style="filled" fillcolor=red];
        7 [label="Exit class <SELF_STATIC_OBJECT>" style="filled" fillcolor=red];
    }
    4 -> {5} [color=green];
    5 -> {6} [color=green];
    5 -> {6} [style=dashed];
    6 -> {7} [color=green];

    subgraph cluster_4 {
        color=red
        8 [label="Enter function <getter>" style="filled" fillcolor=red];
        subgraph cluster_5 {
            color=blue
            9 [label="Enter block"];
            subgraph cluster_6 {
                color=blue
                10 [label="Enter &&"];
                11 [label="Access variable this@R|/check_1|"];
                12 [label="Type operator: (this@R|/check_1| is R|B|)"];
                13 [label="Exit left part of &&"];
                14 [label="Enter right part of &&"];
                15 [label="Access variable R|/B.b|"];
                16 [label="Exit &&"];
            }
            17 [label="Jump: ^ (this@R|/check_1| is R|B|) && this@R|/check_1|.R|/B.b|"];
            18 [label="Stub" style="filled" fillcolor=gray];
            19 [label="Exit block" style="filled" fillcolor=gray];
        }
        20 [label="Exit function <getter>" style="filled" fillcolor=red];
    }
    8 -> {9};
    9 -> {10};
    10 -> {11};
    11 -> {12};
    12 -> {13};
    13 -> {14 16};
    14 -> {15};
    15 -> {16};
    16 -> {17};
    17 -> {20};
    17 -> {18} [style=dotted];
    18 -> {19} [style=dotted];
    19 -> {20} [style=dotted];

    subgraph cluster_7 {
        color=red
        21 [label="Enter function <getter>" style="filled" fillcolor=red];
        subgraph cluster_8 {
            color=blue
            22 [label="Enter block"];
            subgraph cluster_9 {
                color=blue
                23 [label="Enter &&"];
                24 [label="Access variable this@R|/check_2|"];
                25 [label="Type operator: (this@R|/check_2| is R|B|)"];
                26 [label="Exit left part of &&"];
                27 [label="Enter right part of &&"];
                28 [label="Access variable this@R|/check_2|"];
                29 [label="Smart cast: this@R|/check_2|"];
                30 [label="Access variable R|/B.b|"];
                31 [label="Exit &&"];
            }
            32 [label="Jump: ^ (this@R|/check_2| is R|B|) && this@R|/check_2|.R|/B.b|"];
            33 [label="Stub" style="filled" fillcolor=gray];
            34 [label="Exit block" style="filled" fillcolor=gray];
        }
        35 [label="Exit function <getter>" style="filled" fillcolor=red];
    }
    21 -> {22};
    22 -> {23};
    23 -> {24};
    24 -> {25};
    25 -> {26};
    26 -> {27 31};
    27 -> {28};
    28 -> {29};
    29 -> {30};
    30 -> {31};
    31 -> {32};
    32 -> {35};
    32 -> {33} [style=dotted];
    33 -> {34} [style=dotted];
    34 -> {35} [style=dotted];

}
